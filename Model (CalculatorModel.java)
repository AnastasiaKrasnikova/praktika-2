import java.util.Stack;

public class CalculatorModel {
    public double evaluateExpression(String expression) throws IllegalArgumentException {
        if (!areBracketsBalanced(expression)) {
            throw new IllegalArgumentException("Несбалансированные скобки в выражении");
        }
        
        return evaluate(infixToPostfix(expression));
    }
    
    private boolean areBracketsBalanced(String expr) {
        Stack<Character> stack = new Stack<>();
        
        for (char c : expr.toCharArray()) {
            if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                if (stack.isEmpty()) return false;
                stack.pop();
            }
        }
        
        return stack.isEmpty();
    }
    
    private String infixToPostfix(String expr) {
        // Реализация преобразования инфиксной записи в постфиксную (обратную польскую)
        // с учетом приоритетов операторов и новых функций
        return "";
    }
    
    private double evaluate(String postfixExpr) {
        // Реализация вычисления постфиксного выражения
        // с поддержкой новых операций
        return 0.0;
    }
    
    private double factorial(double n) {
        if (n < 0) throw new IllegalArgumentException("Факториал отрицательного числа");
        if (n == 0) return 1;
        double result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }
    
    private double log2(double n) {
        return Math.log(n) / Math.log(2);
    }
}
